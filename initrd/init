#!/bin/busybox sh
#
# By Chih-Wei Huang <cwhuang@linux.org.tw>
# and Thorsten Glaser <tg@mirbsd.org>
#
# Modified by BlissLabs & Contributors
#
# License: GNU Public License
# We explicitely grant the right to use the scripts
# with Android-x86 project.
#
# shellcheck disable=3036,2068,2013

PATH=/sbin:/bin
export PATH

# configure debugging output
if [ "$DEBUG" ]; then
	LOG=/tmp/log
	set -x
else
	LOG=/dev/null
	test -e "$LOG" || busybox mknod $LOG c 1 3
fi
exec 2>>$LOG

# early boot
if test x"$HAS_CTTY" != x"Yes"; then
	# initialise /proc & /sys and /tmp
	busybox mount -t proc proc /proc
	busybox mount -t sysfs sys /sys
	busybox mount -t tmpfs tmpfs /tmp

	# let busybox install all applets as symlinks
	busybox --install -s /bin/

	# spawn shells on tty 2 and 3 if debug or install
	if [ "$DEBUG" ]; then
		# ensure they can open a controlling tty
		mknod /dev/tty c 5 0
		# create device nodes then spawn on them
		mknod /dev/tty2 c 4 2 && openvt
		mknod /dev/tty3 c 4 3 && openvt
	fi
	if [ "$DEBUG" ]; then
		echo 0 0 0 0 >/proc/sys/kernel/printk
	fi
	# initialise /dev (first time)
	busybox mount -t devtmpfs devtmpfs /dev
	mkdir -p /dev/block
	echo /bin/mdev >/proc/sys/kernel/hotplug
	mdev -s
	# re-run this script with a controlling tty
	exec env HAS_CTTY=Yes setsid cttyhack /bin/sh "$0" "$@"
fi

# now running under a controlling tty; debug output from stderr into log file
# boot up Android

# First, chmod /sbin because somehow the build process messed up the permission
chmod 755 /bin/* /sbin/*

# check if specified device has pattern like UUID= or LABEL=
find_device() {
	case "$1" in
	UUID=* | LABEL=*) busybox findfs "$1" ;;
	*) echo "$1" ;;
	esac
}

debug_shell() { sh 2>&1; }

for c in $(cat /proc/cmdline); do
	case "$c" in
	*=*) eval "export $(echo "${c%%=*}" | sed -r "s/_/__/g;s/\./_/g")='${c#*=}'" ;;
	*) ;;
	esac
done

cd /

ROOT=$(find_device "$root")
if [ ! "$ROOT" ] || ! mount -o rw "$ROOT" /mnt; then
	debug_shell fatal-err
fi

hash -r
text_art

if ! grep 'sse4_2' /proc/cpuinfo 1>/dev/null; then
	echo 'WARNING: Your CPU does not support SSE4.2 instructions, the OS will not boot'
fi

if [ 0"$DEBUG" -gt 0 ]; then
	echo -e "\nType 'exit' to continue booting...\n"
	debug_shell debug-found
fi

exec ${SWITCH:-switch_root} /mnt /sbin/init

# avoid kernel panic
while :; do
	cat <<EOF

	Android-x86 console shell. Use only in emergencies.'

EOF
	debug_shell fatal-err
done
